// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  username          String   @unique
  firstName         String
  lastName          String
  password          String
  avatar            String?
  role              UserRole @default(DEVELOPER)
  isActive          Boolean  @default(true)
  isEmailVerified   Boolean  @default(false)
  emailVerifiedAt   DateTime?
  emailVerificationToken String?
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  ownedProjects    Project[]      @relation("ProjectOwner")
  teamMemberships  TeamMember[]
  refreshTokens    RefreshToken[]
  auditLogs        AuditLog[]
  triggeredPipelineRuns PipelineRun[] @relation("PipelineRunTriggeredBy")
  triggeredTestRuns TestRun[]      @relation("TestRunTriggeredBy")
  deployments      Deployment[]   @relation("DeploymentDeployedBy")
  customPermissions UserPermission[]

  @@index([role, isActive])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  DEVELOPER
  TESTER
  VIEWER
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  TeamMember[]
  projects Project[]

  @@index([isActive])
  @@index([createdAt])
  @@map("teams")
}

model TeamMember {
  id     String @id @default(uuid())
  userId String
  teamId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@map("team_members")
}

model Project {
  id            String        @id @default(uuid())
  name          String
  description   String?
  repositoryUrl String
  branch        String        @default("main")
  framework     String
  language      String
  ownerId       String
  teamId        String?
  isActive      Boolean       @default(true)
  settings      String        @default("{}") // JSON as string for SQLite
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  owner       User         @relation("ProjectOwner", fields: [ownerId], references: [id])
  team        Team?        @relation(fields: [teamId], references: [id])
  pipelines   Pipeline[]
  testSuites  TestSuite[]
  deployments Deployment[]
  secrets     ProjectSecret[]
  securityScans SecurityScan[]

  @@index([ownerId])
  @@index([teamId])
  @@index([isActive])
  @@index([createdAt])
  @@map("projects")
}

model ProjectSecret {
  id          String   @id @default(uuid())
  projectId   String
  key         String
  value       String   // Encrypted value
  description String?
  environment String   @default("development") // development, staging, production, etc.
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key, environment])
  @@index([projectId])
  @@index([environment])
  @@map("project_secrets")
}

model SecurityScan {
  id             String              @id @default(uuid())
  projectId      String
  scanType       SecurityScanType
  status         SecurityScanStatus  @default(PENDING)
  startedAt      DateTime            @default(now())
  completedAt    DateTime?
  duration       Int?                // Duration in seconds
  vulnerabilities String             @default("[]") // JSON array of vulnerabilities
  summary        String?             // JSON summary of scan results
  initiatedBy    String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
  @@index([scanType])
  @@index([startedAt])
  @@map("security_scans")
}

enum SecurityScanType {
  DEPENDENCY    // npm audit / yarn audit
  SAST          // Static Application Security Testing
  DAST          // Dynamic Application Security Testing
  CONTAINER     // Container image scanning
  LICENSE       // License compliance scanning
}

enum SecurityScanStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

model Pipeline {
  id        String         @id @default(uuid())
  projectId String
  name      String
  trigger   PipelineTrigger
  stages    String           @default("[]")
  status    PipelineStatus @default(IDLE)
  isActive  Boolean        @default(true)
  lastRunAt DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pipelineRuns PipelineRun[]

  @@index([projectId])
  @@index([status])
  @@index([isActive])
  @@index([lastRunAt])
  @@map("pipelines")
}

enum PipelineTrigger {
  MANUAL
  GIT_PUSH
  GIT_PR
  SCHEDULE
  WEBHOOK
}

enum PipelineStatus {
  IDLE
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  PENDING
}

model PipelineRun {
  id         String             @id @default(uuid())
  pipelineId String
  status     PipelineRunStatus
  triggeredBy String?
  startedAt  DateTime           @default(now())
  finishedAt DateTime?
  duration   Int?               // Duration in seconds
  logs       String?
  metadata   String               @default("{}")

  // Relations
  pipeline Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  triggeredByUser User? @relation("PipelineRunTriggeredBy", fields: [triggeredBy], references: [id])
  stages   StageRun[]

  @@index([pipelineId])
  @@index([status])
  @@index([triggeredBy])
  @@index([startedAt])
  @@index([pipelineId, status])
  @@map("pipeline_runs")
}

enum PipelineRunStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

model StageRun {
  id            String            @id @default(uuid())
  pipelineRunId String
  stageName     String
  stageType     StageType
  status        StageRunStatus
  startedAt     DateTime?
  finishedAt    DateTime?
  duration      Int?              // Duration in seconds
  logs          String?
  artifacts     String              @default("[]")
  metadata      String              @default("{}")

  // Relations
  pipelineRun PipelineRun @relation(fields: [pipelineRunId], references: [id], onDelete: Cascade)

  @@index([pipelineRunId])
  @@index([status])
  @@index([stageType])
  @@map("stage_runs")
}

enum StageType {
  BUILD
  TEST
  SECURITY_SCAN
  CODE_ANALYSIS
  DEPLOY
  NOTIFICATION
  APPROVAL
}

enum StageRunStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  SKIPPED
}

model TestSuite {
  id          String   @id @default(uuid())
  projectId   String
  name        String
  description String?
  type        TestType @default(UNIT)
  framework   String
  testFiles   String   @default("[]")
  configuration String   @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project  Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  testRuns TestRun[]

  @@index([projectId])
  @@index([type])
  @@index([isActive])
  @@map("test_suites")
}

enum TestType {
  UNIT
  INTEGRATION
  E2E
  PERFORMANCE
  SECURITY
}

model TestRun {
  id          String        @id @default(uuid())
  testSuiteId String
  status      TestRunStatus
  triggeredBy String?
  environment String        @default("development")
  branch      String        @default("main")
  startedAt   DateTime      @default(now())
  finishedAt  DateTime?
  duration    Int?          // Duration in seconds
  totalTests  Int           @default(0)
  passedTests Int           @default(0)
  failedTests Int           @default(0)
  skippedTests Int          @default(0)
  coverage    Float?        // Coverage percentage
  results     String          @default("{}")
  metadata    String          @default("{}")
  errorMessage String?
  errorStack   String?

  // Relations
  testSuite TestSuite @relation(fields: [testSuiteId], references: [id], onDelete: Cascade)
  triggeredByUser User? @relation("TestRunTriggeredBy", fields: [triggeredBy], references: [id])

  @@index([testSuiteId])
  @@index([status])
  @@index([environment])
  @@index([startedAt])
  @@index([testSuiteId, status])
  @@map("test_runs")
}

enum TestRunStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  SKIPPED
}

model Deployment {
  id          String           @id @default(uuid())
  projectId   String
  environment String
  version     String
  branch      String           @default("main")
  commitHash  String           @default("")
  status      DeploymentStatus
  deployedBy  String
  deployedAt  DateTime         @default(now())
  finishedAt  DateTime?
  duration    Int?             // Duration in seconds
  logs        String?
  rollbackId  String?          // Reference to previous deployment for rollback
  rollbackFromId String?       // Deployment that was rolled back from this
  rollbackToId   String?       // Deployment that this was rolled back to
  configuration  String        @default("{}")
  metadata    String           @default("{}")
  errorMessage String?
  errorStack   String?

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deployedByUser User @relation("DeploymentDeployedBy", fields: [deployedBy], references: [id])

  @@index([projectId])
  @@index([environment])
  @@index([status])
  @@index([deployedAt])
  @@index([projectId, environment])
  @@map("deployments")
}

enum DeploymentStatus {
  PENDING
  IN_PROGRESS
  DEPLOYED
  FAILED
  ROLLED_BACK
}

model Integration {
  id            String          @id @default(uuid())
  userId        String?         // User who created the integration
  teamId        String?         // Team-level integration
  projectId     String?         // Project-specific integration
  name          String
  type          IntegrationType
  configuration String          @default("{}") // Encrypted OAuth tokens, API keys, etc.
  status        IntegrationStatus @default(ACTIVE)
  isActive      Boolean         @default(true)
  lastSyncAt    DateTime?
  lastSyncStatus String?        // SUCCESS, FAILED, etc.
  errorMessage  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  webhooks      Webhook[]
  notifications IntegrationNotification[]

  @@index([userId])
  @@index([teamId])
  @@index([projectId])
  @@index([type])
  @@index([status])
  @@index([isActive])
  @@map("integrations")
}

enum IntegrationType {
  GITHUB
  GITLAB
  BITBUCKET
  JENKINS
  JIRA
  SLACK
  DISCORD
  TEAMS
  SONARQUBE
  AWS
  AZURE
  GCP
  CUSTOM_WEBHOOK
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
  PENDING_AUTH
}

model Webhook {
  id            String        @id @default(uuid())
  integrationId String
  projectId     String?
  name          String
  url           String
  secret        String?       // Webhook secret for verification
  events        String        @default("[]") // Array of event types
  isActive      Boolean       @default(true)
  lastTriggeredAt DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  deliveries  WebhookDelivery[]

  @@index([integrationId])
  @@index([projectId])
  @@index([isActive])
  @@map("webhooks")
}

model WebhookDelivery {
  id          String              @id @default(uuid())
  webhookId   String
  event       String
  payload     String              @default("{}")
  status      WebhookDeliveryStatus
  statusCode  Int?
  response    String?
  attempt     Int                 @default(1)
  deliveredAt DateTime            @default(now())

  // Relations
  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([status])
  @@index([deliveredAt])
  @@map("webhook_deliveries")
}

enum WebhookDeliveryStatus {
  PENDING
  SUCCESS
  FAILED
  RETRYING
}

model IntegrationNotification {
  id            String   @id @default(uuid())
  integrationId String
  channel       String   // Slack channel, Teams channel, etc.
  events        String   @default("[]") // Events to notify about
  template      String?  // Custom message template
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([isActive])
  @@map("integration_notifications")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  metadata  String     @default("{}")
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

model SystemMetric {
  id        String   @id @default(uuid())
  name      String
  value     Float
  unit      String
  tags      String     @default("{}")
  timestamp DateTime @default(now())

  @@index([name, timestamp])
  @@map("system_metrics")
}

model SystemLog {
  id        String   @id @default(uuid())
  level     LogLevel
  message   String
  service   String
  requestId String?
  userId    String?
  metadata  String     @default("{}")
  timestamp DateTime @default(now())

  @@index([level, timestamp])
  @@index([service, timestamp])
  @@map("system_logs")
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

model UserPermission {
  id         String     @id @default(uuid())
  userId     String
  permission Permission
  createdAt  DateTime   @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@index([userId])
  @@index([permission])
  @@map("user_permissions")
}

enum Permission {
  // User Management
  USER_VIEW
  USER_CREATE
  USER_EDIT
  USER_DELETE
  USER_MANAGE_ROLES
  USER_MANAGE_PERMISSIONS

  // Team Management
  TEAM_VIEW
  TEAM_CREATE
  TEAM_EDIT
  TEAM_DELETE
  TEAM_MANAGE_MEMBERS

  // Project Management
  PROJECT_VIEW
  PROJECT_CREATE
  PROJECT_EDIT
  PROJECT_DELETE
  PROJECT_MANAGE_SETTINGS

  // Pipeline Management
  PIPELINE_VIEW
  PIPELINE_CREATE
  PIPELINE_EDIT
  PIPELINE_DELETE
  PIPELINE_EXECUTE
  PIPELINE_CANCEL

  // Test Management
  TEST_VIEW
  TEST_CREATE
  TEST_EDIT
  TEST_DELETE
  TEST_EXECUTE

  // Deployment Management
  DEPLOYMENT_VIEW
  DEPLOYMENT_TRIGGER
  DEPLOYMENT_ROLLBACK
  DEPLOYMENT_APPROVE

  // Integration Management
  INTEGRATION_VIEW
  INTEGRATION_CREATE
  INTEGRATION_EDIT
  INTEGRATION_DELETE

  // System Management
  SYSTEM_VIEW_LOGS
  SYSTEM_VIEW_METRICS
  SYSTEM_MANAGE_SETTINGS
  SYSTEM_VIEW_AUDIT_LOGS
}